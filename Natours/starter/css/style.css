/*
// This look s cooler for me :)
$color-primary: #06a;
$color-primary-light: rgb(87, 169, 224);
$color-primary-dark: rgb(1, 46, 77);
$cover-image-transparency: 0.7;
*/
.heading-secondary, .feature-box__icon {
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent; }

*,
*::after,
*::before {
  padding: 0;
  margin: 0;
  /* 
		Instead of border-box we use here inherit because border-box we moved into body element 
		Now each element in body element inherit box-sizing property (power if inheritance)
	*/
  box-sizing: inherit; }

/*
	html selector is a root element. Ideal for setting font size and then using only 
	relative values for that
*/
html {
  /* 
    Here we choose absolute value in. This means 1rem means 62.5% of 16px exactly.
    If you remember, 16px is default font size for most browsers with default settings
    */
  font-size: 62.5%; }

body {
  /* we moved box-sizing into body instead of universal selector */
  box-sizing: border-box; }

/* 
    Keyframes is something new in CSS for me. 
    It's the key frames of some animation (name of animation is after @keyframe annotation).
    You can as many keyframes and you need. In our case we use 0% (start animation), 80% (almost end)
    and 100% (end animation)
*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* Starting transform right to left*/
    /* Of course, positive value will be left to right */
    transform: translateX(-10rem);
    /* Starting transform right to left */ }
  80% {
    /* 
        In state out text will slide a bit more to right than final position and in 100% returns back
      */
    transform: translateX(2rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /* Initial start position. In this case it will be final state */ } }

/* This was a homework sed for subtitle */
@keyframes moveInRight {
  0% {
    opacity: 0;
    /* Starting transform right to left*/
    /* Of course, positive value will be left to right */
    transform: translateX(10rem);
    /* Starting transform right to left */ }
  80% {
    /* 
              In state out text will slide a bit more to right than final position and in 100% returns back
           */
    transform: translateX(-2rem); }
  100% {
    opacity: 1;
    transform: translateX(0);
    /* Initial start position. In this case it will be final state */ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateX(0);
    /* Initial start position. In this case it will be final state */ } }

body {
  /* 
    Think like font-family or line-height you don't need as variables because
    this things usually defines only at once
  */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  /*padding: 30px;*/
  /* Add some padding to entire webpage because we want border background color borders. But beware, padding property is not inherited */
  /*
		recalculated to relative units. If you remember, padding it's computed by font-size: in root element 
  */
  padding: 3rem; }

/* Main heading styles */
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* 
          The backface-visibility: property defines whenever or not the back face of an element
          should be visible facing the user.
  
          The back face of an element mirror image of front face being displayed.
  
          The property is useful when an element is rotates. It let's you choose if the user
          see the face or not.
      */
  backface-visibility: hidden;
  /* Some white space after heading */
  margin-bottom: 6rem;
  /* <span> element is usually inline. We want the change behavior for title and subtitle */
  /* Recommend you inspect this in developer console */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* Space between letters */
    /* Make animation by defined in @keyframes annotation below */
    animation-name: moveInLeft;
    /* Name of @keyframes animation name */
    animation-duration: 1s;
    /* Animation takes 2.2s */
    /* Not using in this practice, just for learning
      /*animation-delay: 1s;*/
    /* Delay before animation start will be 1s */
    /*animation-iteration-count: 2;*/
    /* The animation will be provided 3 times */
    /* Animation start faster and then slowing down */
    /* More info: https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp */
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* Opposite animation as heading */
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 2px;
  transition: all 0.2s; }

.heading-secondary:hover {
  transform: skewY(2deg) skewX(15deg) scale(1.1);
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem;
  font-weight: 300; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-top-big {
  margin-top: 8rem; }

.u-margin-top-huge {
  margin-top: 10rem; }

.u-uppercase {
  text-transform: uppercase; }

.btn {
  /* Thi link is pseudo class like after, before, etc.. Look in LINKS.md for more */
  /* Cursor over the button */
  /* Cursor clocked to button */
  /* This pseudo class is after the button */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    border-radius: 10rem;
    /* In normal case link is an inline element and may hover our text. We should change behavior */
    display: inline-block;
    /* 
          Shorten write of animation to button.All is shorthand for all animation properties 
          which were used before separated (like animation-timing-function)
      */
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    /* Button move -.3rem to up (reason why negative value) */
    transform: translateY(-0.3rem);
    /* 
          Box shadow has many parameters. The first is X direction shadow at tom, second is X on bottom.
          Third is blur of shadow. Fourth is color (with alpha opacity in our case)
  
          Otherwise, in  Sass you can use hex color code as variable. But this 
          works only in Sass. In normal CSS you must give 3 separate colors and not
          just hex code
      */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.5);
    /* Like in in btn-after but this cases only when button is mouse over */ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* Opacity zero is trick to scaling. We will see just borders like ghosts */
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    /* 
          Smaller values than in hover after clicks makes that button after click will look
          closer to user.
          
          Ff you're writing value with leading zero, it's a good css practice write it's without
          zero. Of course, it will works with 0.5rem to, but .5rem is more understandable for more
          css programmers.
      */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.5); }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    /* 
          This put our button top over all elements with default value. Otherwise text in button will be
          hidden beside background because we're using absolute position. And you remember, the parent is
          btn. More negative value is more for top
      */
    z-index: -1;
    /* And set transition speed for after hover::after using */
    transition: all 0.4s; }
  .btn--white {
    background: #fff;
    color: #777; }
    .btn--white::after {
      background: #fff; }
  .btn--green {
    background: #55c57a;
    color: #f7f7f7; }
    .btn--green::after {
      background: #55c57a; }
  .btn--animated {
    /* New value. The last value is animation delay */
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* 
            The animation-fill-mode property specifies a style for the element when the animation 
            is not playing (before it starts, after it ends, or both).
    
            Backwards means that 0% will be automatically applied before animation starts. That means
            0% will not be applied when animation starts. Animation then looks smoother. 
    
            For mor info looks at LINKS.md
        */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.75);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.75);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    position: absolute;
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-1.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4 rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem; }
  .feature-box:hover {
    transform: translateY(-1rem) scale(1.3); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem; }
  .card__side {
    height: 52rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 3rem;
    overflow: hidden;
    /*
    box-shadow explain:
    - First number is x-axis shadow
    - Second one is y-axis shadow
    - Third one is blur
    - Last is the color (you should always using **rgba** and using opacity for
    shadows)
    */
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background: linear-gradient(to right bottom, #2998ff, #5634fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    /*
    We have 4 inputs (4 dimensions) in example below which means:

    1. Where poligon starts 0 on x axis and 0 on y axis (top side)
    2. Where first line of polygon ends (100% on x axis and 0 on y axis)
    3. Where second line (right side) ends (100% on x asis and 85% on y axis)
    4. Where third line ends (0 on x axis and 100% on y axis)
    
    Clip path property is a morern CSS property and we shoud add webkit prefix
    right functionality in Chrome or Safari
    */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3rem;
    border-top-right-radius: 3rem; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5634fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    text-align: right;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /*
      The css property ```text-decoration-break``` with ```clone``` value copy the all decorations around text in every line of text.

      For working in chrome, we need add webkit prefix
    */
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 52, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 200; }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: #fff;
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg); }
  .story__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    position: relative; }
  .story__img {
    height: 100%;
    transform: translateX(-4rem) scale(1.3);
    backface-visibility: hidden;
    transition: all 0.5s; }
  .story__text {
    transform: skewX(12deg); }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #fff;
    text-align: center;
    opacity: 0;
    transition: all 0.5s;
    backface-visibility: hidden; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__img {
    transform: translateX(-4rem) scale(1);
    filter: blur(3px) brightness(80%); }

.header {
  height: 95vh;
  /* 95% of viewport (window size) */
  /* 
    background properties:
    1. background color or gradient in our case with some alpha
    2. url to image
    3. repeat / repeat-x / repeat-y / usually no-repeat for cover 
    This is not-needed always for cover images but better to have it
    4. Vertical position. top means that top of the image stays in top of viewport
    5. Horizontal position. center means that center image will stay in viewport
    6. Cover means cover image
    */
  background: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg) no-repeat top center/cover;
  position: relative;
  /* 
    Clip path cases clip of some background
    Coordinates it's a points in clockwise direction (like border, margin od padding)
    Good resource for that: https://bennettfeely.com/clippy/
    */
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Adding logo */
  /* 
      This is incorrect path for centering box (better is flex box, but it will be later) 
      For now is enough and transform: translate is interesting
    */ }
  .header__logo-box {
    /* This is absolute position relative to header */
    /* If header hasn't position relative, logo will be padded inherited from body
         and from header element */
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* 
        Centering texts we can do only in block elements. This case that our button
        will be centered because we changes behavior to inline-block 
        */
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg) no-repeat top center/cover;
  transform: skewY(-7deg);
  margin-top: -15rem; }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -10rem; }

.section-stories {
  background-color: #f7f7f7;
  padding: 15rem 0; }
